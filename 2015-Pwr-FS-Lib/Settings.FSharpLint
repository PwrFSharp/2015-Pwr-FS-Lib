<?xml version="1.0" encoding="utf-8"?>
<FSharpLintSettings xmlns="https://github.com/fsprojects/FSharpLint/blob/master/ConfigurationSchema.xsd">
  <IgnoreFiles Update="Overwrite"><![CDATA[assemblyinfo.*]]></IgnoreFiles>
  <Analysers>
    <Hints>
      <Rules />
      <Hints><![CDATA[not (a =  b) ===> a <> b
not (a <> b) ===> a =  b
not (a >  b) ===> a <= b
not (a >= b) ===> a <  b
not (a <  b) ===> a >= b
not (a <= b) ===> a >  b
compare x y <> 1 ===> x <= y
compare x y = -1 ===> x < y
compare x y <> -1 ===> x >= y
compare x y = 1 ===> x > y
List.head (List.sort x) ===> List.min x
List.head (List.sortBy f x) ===> List.minBy f x
List.map f (List.map g x) ===> List.map (g >> f) x
Array.map f (Array.map g x) ===> Array.map (g >> f) x
Seq.map f (Seq.map g x) ===> Seq.map (g >> f) x
List.nth x 0 ===> List.head x
List.map f (List.replicate n x) ===> List.replicate n (f x)
List.rev (List.rev x) ===> x
Array.rev (Array.rev x) ===> x
List.fold (@) [] ===> List.concat
List.map id ===> id
Array.map id ===> id
Seq.map id ===> id
(Array.length x) = 0 ===> Array.isEmpty x
(Seq.length x) = 0 ===> Seq.isEmpty x
x = [||] ===> Array.isEmpty x
(List.length x) <> 0 ===> not (List.isEmpty x)
(Array.length x) <> 0 ===> not (Array.isEmpty x)
(Seq.length x) <> 0 ===> not (Seq.isEmpty x)
(List.length x) > 0 ===> not (List.isEmpty x)
(Array.length x) <> 0 ===> not (Array.isEmpty x)
(Seq.length x) <> 0 ===> not (Seq.isEmpty x)
List.isEmpty (List.filter f x) ===> not (List.exists f x)
Array.isEmpty (Array.filter f x) ===> not (Array.exists f x)
Seq.isEmpty (Seq.filter f x) ===> not (Seq.exists f x)
not (List.isEmpty (List.filter f x)) ===> List.exists f x
not (Array.isEmpty (Array.filter f x)) ===> Array.exists f x
not (Seq.isEmpty (Seq.filter f x)) ===> Seq.exists f x
List.length x >= 0 ===> true
Array.length x >= 0 ===> true
Seq.length x >= 0 ===> true
x = true ===> x
x = false ===> not x
true = a ===> a
false = a ===> not a
a <> true ===> not a
a <> false ===> a
true <> a ===> not a
false <> a ===> a
if a then true else false ===> a
if a then false else true ===> not a
not (not x) ===> x
(fst x, snd x) ===> x
true && x ===> x
false && x ===> false
true || x ===> true
false || x ===> x
not true ===> false
not false ===> true
fst (x, y) ===> x
snd (x, y) ===> y
List.fold f x [] ===> x
Array.fold f x [||] ===> x
List.foldBack f x [] ===> x
Array.foldBack f x [||] ===> x
x - 0 ===> x
x * 1 ===> x
x / 1 ===> x
List.fold (+) 0 ===> List.sum
Array.fold (+) 0 ===> Array.sum
Seq.fold (+) 0 ===> Seq.sum
List.empty ===> []
Array.empty ===> [||]
x::[] ===> [x]
x @ [] ===> x
List.isEmpty [] ===> true
Array.isEmpty [||] ===> true
fun _ -> () ===> ignore
fun x -> x ===> id
id x ===> x
id >> f ===> f
f >> id ===> f
x = null ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
null = x ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
x <> null ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
null <> x ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"]]></Hints>
    </Hints>
  </Analysers>
</FSharpLintSettings>